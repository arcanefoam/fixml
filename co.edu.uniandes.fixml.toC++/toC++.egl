[% import 'toC++Utils.egl'; %]
package [%= Model.allInstances.first().name %];

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
[%
for (subClazz in clazz.clazzes ) { %]
#include "[%= subClazz.name%].h" 
[% } %]

public class [%= clazz.name %] {

	private:[%="\n"%][% 
	for (attribute in clazz.attributes ) { %]
  	String [%= attribute.name  %];
	[% } %][%

	for (subClazz in clazz.clazzes ) {
		var cont: Integer = 1;
		for (instance in subClazz.instances ) { %]
	[%= subClazz.name%]* [%= subClazz.name%]_[%= cont%];[% 
		cont = cont+1; 
		}%][%="\n"%][%	
	}%]
 	
 	public: 

  	// default constructor
	public [%= clazz.name %] () {[%="\n"%][%
	
	for (att in clazz.attributes) { %]
		[%= att.name%] = [%=valueFor2(clazz.instances.first, att)%];
	[% }
	
	if ( clazz.eContainer().isTypeOf( Model ) ) {  
		for (subClazz in clazz.clazzes ) { 
			subClazz.initialization2('');
		} 
	}else{
		for (subClazz in clazz.clazzes ) { %]		
			[%= subClazz.name%]_obj = new [%= subClazz.name%]();
		[% } 
	} %]
  	
  	}
  
  	// by parameters
  	public [%= clazz.name %] ([%
		var parameters : String = "";
	  	parameters = clazz.attributes.collect(a|"String " + a.name + "_").concat(", "); 
      	for (subClazz in clazz.clazzes ) {
			var cont: Integer = 1;
			for (instance in subClazz.instances ) {
				parameters = parameters + ", " + subClazz.name + "* " + subClazz.name + "_" + cont;
				cont = cont+1;
			}
		}%]
		[%=parameters%]){
	  
		[%= clazz.attributes.collect(a|a.name + " = " + a.name + "_").concat(";\n\t\t")%];
	  
		[%for (subClazz in clazz.clazzes ){
			var cont: Integer = 1;
			for (instance in subClazz.instances ) { %]
		this.[%= subClazz.name%]_[%= cont%] = [%= subClazz.name%]_[%= cont%];[%="\n"%] [% 
			cont = cont+1;
			}	
		}%]
  }
} 